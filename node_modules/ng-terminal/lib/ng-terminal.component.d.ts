import { OnInit, ElementRef, EventEmitter, OnDestroy, AfterViewInit, ChangeDetectorRef, OnChanges, Renderer2, SimpleChanges } from '@angular/core';
import { Terminal } from 'xterm';
import { NgTerminal } from './ng-terminal';
import { Observable } from 'rxjs';
import { ResizeEvent } from 'angular-resizable-element';
import { ResizeObserver } from '@juggle/resize-observer';
import * as i0 from "@angular/core";
export declare class NgTerminalComponent implements OnInit, OnChanges, AfterViewInit, NgTerminal, OnDestroy {
    private renderer;
    private ref;
    private hostRef;
    private term;
    private fitAddon;
    private keyInputSubject;
    private keyEventSubject;
    private requestRenderFromAPI;
    private allLogsSubject;
    private keyInputSubjectSubscription;
    private keyEventSubjectSubscription;
    private allLogsSubjectSubscription;
    private requestRenderSubscription;
    private resizableObservers;
    private h;
    private dataSource;
    private dataSourceSubscription;
    private readonly paddingSize;
    stylesForDiv: Partial<CSSStyleDeclaration>;
    set _dataSource(ds: Observable<string>);
    get _dataSource(): Observable<string>;
    _rowsInput?: number;
    _colsInput?: number;
    _minWidthInput?: number;
    _minHeightInput?: number;
    set draggable(draggable: boolean);
    get draggable(): boolean;
    lastDraggedPosition: {
        width: string;
        height: string;
    };
    _draggableInput?: boolean;
    _stylesInput: any;
    setMinWidth(width: number): void;
    setMinHeight(height: number): void;
    setDraggable(draggable: boolean): void;
    setRows(rows: number): void;
    setCols(cols: number): void;
    setStyle(styleObject: any): void;
    keyInputEmitter: EventEmitter<string>;
    keyEventEmitter: EventEmitter<{
        key: string;
        domEvent: KeyboardEvent;
    }>;
    terminalOuter: ElementRef;
    resizeBox: ElementRef;
    private getNextOrWait;
    private pushToWaitingQueue;
    /**
     * @internal
     */
    private stopAndPolling;
    /**
     * @internal don't make a direct call
     */
    interval: ReturnType<typeof setInterval>;
    /**
     * @internal don't make a direct call
     */
    private releaseNextOne;
    /**
     * @internal don't make a direct call
     */
    private waitingQueue;
    constructor(renderer: Renderer2, ref: ChangeDetectorRef, hostRef: ElementRef);
    private observableSetup;
    /**
     * set dimensions
     */
    private setOuterDimensions;
    /**
     * Render is being used for fast rendering without markForCheck().
     */
    private applyStyleToDiv;
    /**
     * When draggable is true, add border styles
     * Render is being used for fast rendering without markForCheck().
     */
    ngOnInit(): void;
    /**
     * It creates new terminal in #terminal.
     */
    ngAfterViewInit(): void;
    ngOnChanges(changes?: SimpleChanges): void;
    /**
     * It must be called after having initialized the terminal.
     * xterm fit
     * @param rowColChange
     * @returns
     */
    private coordinateOuterAndTerminal;
    observeTerminalDimension(): ResizeObserver;
    observeHostDimension(): ResizeObserver;
    /**
     * clean all resources
     */
    ngOnDestroy(): void;
    write(chars: string): void;
    get keyInput(): Observable<string>;
    get keyEventInput(): Observable<{
        key: string;
        domEvent: KeyboardEvent;
    }>;
    get underlying(): Terminal;
    get isDraggableOnEdgeActivated(): boolean;
    /**
     * After user coordinate dimensions of terminal, it's called.
     * @param left
     * @param top
     * @param width
     * @param height
     */
    onResizeEnd(left: number, top: number, width: number, height: number): void;
    /**
     * Before onResizeEnd is called, it valiates dimensions to change.
     * @param re dimension to be submitted from resizable stuff
     */
    validatorFactory(): (re: ResizeEvent) => boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgTerminalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgTerminalComponent, "ng-terminal", never, { "_dataSource": "dataSource"; "_rowsInput": "rows"; "_colsInput": "cols"; "_minWidthInput": "minWidth"; "_minHeightInput": "minHeight"; "draggable": "draggable"; }, { "keyInputEmitter": "keyInput"; "keyEventEmitter": "keyEvent"; }, never, never>;
}

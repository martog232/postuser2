(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('xterm'), require('xterm-addon-fit'), require('rxjs'), require('@juggle/resize-observer'), require('angular-resizable-element'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-terminal', ['exports', '@angular/core', 'xterm', 'xterm-addon-fit', 'rxjs', '@juggle/resize-observer', 'angular-resizable-element', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["ng-terminal"] = {}, global.ng.core, global.xterm, global.xtermAddonFit, global.rxjs, global.resizeObserver, global.i2, global.ng.common));
})(this, (function (exports, i0, xterm, xtermAddonFit, rxjs, resizeObserver, i2, i3) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    var NgTerminalService = /** @class */ (function () {
        function NgTerminalService() {
        }
        return NgTerminalService;
    }());
    NgTerminalService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgTerminalService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    NgTerminalService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgTerminalService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgTerminalService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return []; } });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var GlobalStyleComponent = /** @class */ (function () {
        function GlobalStyleComponent() {
        }
        GlobalStyleComponent.prototype.ngOnInit = function () {
        };
        return GlobalStyleComponent;
    }());
    GlobalStyleComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: GlobalStyleComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    GlobalStyleComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: GlobalStyleComponent, selector: "global-style", ngImport: i0__namespace, template: "", styles: [".xterm{position:relative;user-select:none;-ms-user-select:none;-webkit-user-select:none}.xterm.focus,.xterm:focus{outline:none}.xterm .xterm-helpers{position:absolute;top:0;z-index:5}.xterm .xterm-helper-textarea{padding:0;border:0;margin:0;position:absolute;opacity:0;left:-9999em;top:0;width:0;height:0;z-index:-5;white-space:nowrap;overflow:hidden;resize:none}.xterm .composition-view{background:#000;color:#fff;display:none;position:absolute;white-space:nowrap;z-index:1}.xterm .composition-view.active{display:block}.xterm .xterm-viewport{background-color:#000;overflow-y:scroll;cursor:default;position:absolute;right:0;left:0;top:0;bottom:0}.xterm .xterm-screen{position:relative}.xterm .xterm-screen canvas{position:absolute;left:0;top:0}.xterm .xterm-scroll-area{visibility:hidden}.xterm-char-measure-element{display:inline-block;visibility:hidden;position:absolute;top:0;left:-9999em;line-height:normal}.xterm{cursor:text}.xterm.enable-mouse-events{cursor:default}.xterm.xterm-cursor-pointer,.xterm .xterm-cursor-pointer{cursor:pointer}.xterm.column-select.focus{cursor:crosshair}.xterm .xterm-accessibility,.xterm .xterm-message{position:absolute;left:0;top:0;bottom:0;right:0;z-index:10;color:transparent}.xterm .live-region{position:absolute;left:-9999px;width:1px;height:1px;overflow:hidden}.xterm-dim{opacity:.5}.xterm-underline{text-decoration:underline}.xterm-strikethrough{text-decoration:line-through}.xterm-screen .xterm-decoration-container .xterm-decoration{z-index:6;position:absolute}\n"], encapsulation: i0__namespace.ViewEncapsulation.None });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: GlobalStyleComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'global-style',
                        templateUrl: './global-style.component.html',
                        styleUrls: ['../../../../../node_modules/xterm/css/xterm.css'],
                        encapsulation: i0.ViewEncapsulation.None
                    }]
            }], ctorParameters: function () { return []; } });

    var NgTerminalComponent = /** @class */ (function () {
        function NgTerminalComponent(renderer, ref, hostRef) {
            var _this = this;
            this.renderer = renderer;
            this.ref = ref;
            this.hostRef = hostRef;
            this.keyInputSubject = new rxjs.Subject();
            this.keyEventSubject = new rxjs.Subject();
            this.requestRenderFromAPI = new rxjs.Subject();
            this.allLogsSubject = new rxjs.Subject();
            this.resizableObservers = [];
            this.h = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
            this.paddingSize = 5;
            this.stylesForDiv = { 'display': 'block' };
            this._draggableInput = false;
            this._stylesInput = {};
            this.keyInputEmitter = new i0.EventEmitter();
            this.keyEventEmitter = new i0.EventEmitter();
            /**
             * @internal don't make a direct call
             */
            this.releaseNextOne = function () {
                if (!_this.interval) {
                    var list = _this.waitingQueue.splice(0, 1);
                    if (list.length == 1) {
                        _this.allLogsSubject.next(list[0]);
                    }
                }
            };
            /**
             * @internal don't make a direct call
             */
            this.waitingQueue = [];
            this.requestRenderSubscription = this.requestRenderFromAPI.subscribe(function (change) {
                var changeWithDefault = Object.assign({ rowChanged: false, columnChanged: false }, change);
                _this.pushToWaitingQueue(changeWithDefault);
                _this.getNextOrWait();
            });
        }
        Object.defineProperty(NgTerminalComponent.prototype, "_dataSource", {
            get: function () {
                return this.dataSource;
            },
            set: function (ds) {
                var _this = this;
                if (this.dataSourceSubscription != null) {
                    this.dataSourceSubscription.unsubscribe();
                }
                this.dataSource = ds;
                this.dataSourceSubscription = this.dataSource.subscribe(function (data) {
                    _this.write(data);
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgTerminalComponent.prototype, "draggable", {
            get: function () {
                return this._draggableInput;
            },
            set: function (draggable) {
                this._draggableInput = draggable;
                // this.applyStyleToDraggable();
            },
            enumerable: false,
            configurable: true
        });
        NgTerminalComponent.prototype.setMinWidth = function (width) {
            this._minWidthInput = width;
        };
        NgTerminalComponent.prototype.setMinHeight = function (height) {
            this._minHeightInput = height;
        };
        NgTerminalComponent.prototype.setDraggable = function (draggable) {
            this._draggableInput = draggable;
            this.lastDraggedPosition = undefined;
            this.ref.markForCheck();
        };
        NgTerminalComponent.prototype.setRows = function (rows) {
            if (this._rowsInput != rows) {
                this._rowsInput = rows;
                this.requestRenderFromAPI.next({ rowChanged: true });
            }
        };
        NgTerminalComponent.prototype.setCols = function (cols) {
            if (this._colsInput != cols) {
                this._colsInput = cols;
                this.requestRenderFromAPI.next({ columnChanged: true });
            }
        };
        NgTerminalComponent.prototype.setStyle = function (styleObject) {
            var _a;
            if (JSON.stringify((_a = this._stylesInput) !== null && _a !== void 0 ? _a : {}) != JSON.stringify(styleObject !== null && styleObject !== void 0 ? styleObject : {})) {
                this._stylesInput = styleObject;
                this.requestRenderFromAPI.next({});
            }
        };
        NgTerminalComponent.prototype.getNextOrWait = function () {
            if (!this.hostRef.nativeElement.isConnected) {
                this.stopAndPolling();
            }
            else {
                this.releaseNextOne();
            }
        };
        NgTerminalComponent.prototype.pushToWaitingQueue = function (item) {
            this.waitingQueue.push(item);
            this.releaseNextOne();
        };
        /**
         * @internal
         */
        NgTerminalComponent.prototype.stopAndPolling = function () {
            var _this = this;
            var pollFunction = function () {
                if (_this.interval)
                    return;
                var interval = setInterval(function () {
                    if (_this.hostRef.nativeElement.isConnected) {
                        clearInterval(interval);
                        _this.interval = undefined;
                        _this.releaseNextOne();
                    }
                }, 500);
                _this.interval = interval;
            };
            pollFunction();
        };
        NgTerminalComponent.prototype.observableSetup = function () {
            var _this = this;
            this.term.onData(function (input) {
                _this.keyInputSubject.next(input);
            });
            this.term.onKey(function (e) {
                _this.keyEventSubject.next(e);
            });
            this.keyInputSubjectSubscription = this.keyInputSubject.subscribe(function (data) {
                _this.keyInputEmitter.emit(data);
            });
            this.keyEventSubjectSubscription = this.keyEventSubject.subscribe(function (e) {
                _this.keyEventEmitter.emit(e);
            });
            this.resizableObservers = [this.observeTerminalDimension(), this.observeHostDimension()];
            this.allLogsSubjectSubscription = this.allLogsSubject.subscribe(function (change) {
                if (change)
                    _this.coordinateOuterAndTerminal(change);
                else
                    _this.coordinateOuterAndTerminal(change);
                _this.getNextOrWait();
            });
            this.getNextOrWait();
        };
        /**
         * set dimensions
         */
        NgTerminalComponent.prototype.setOuterDimensions = function (left, top, width, height) {
            this.requestRenderFromAPI.next({
                rowChanged: false, columnChanged: false,
                dragged: { draggedWidth: width + "px", draggedHeight: height + "px" }
            });
        };
        /**
         * Render is being used for fast rendering without markForCheck().
         */
        NgTerminalComponent.prototype.applyStyleToDiv = function () {
            var _this = this;
            Object.keys(this.stylesForDiv).map(function (key) {
                return { key: key, value: _this.stylesForDiv[key] };
            }).forEach(function (_e) {
                var key = _e.key, value = _e.value;
                if (value)
                    _this.renderer.setStyle(_this.resizeBox.nativeElement, key, value);
                else {
                    _this.renderer.removeStyle(_this.resizeBox.nativeElement, key);
                }
            });
            this.stylesForDiv = this.stylesForDiv; //invalidate
        };
        /**
         * When draggable is true, add border styles
         * Render is being used for fast rendering without markForCheck().
         */
        // private applyStyleToDraggable() {
        //   if (this._draggableInput)
        //     this.renderer.addClass(this.terminalOuter.nativeElement, 'draggable');
        //   else
        //     this.renderer.removeClass(this.terminalOuter.nativeElement, 'draggable');
        // }
        NgTerminalComponent.prototype.ngOnInit = function () {
        };
        /**
         * It creates new terminal in #terminal.
         */
        NgTerminalComponent.prototype.ngAfterViewInit = function () {
            this.fitAddon = new xtermAddonFit.FitAddon();
            this.term = new xterm.Terminal();
            this.term.open(this.terminalOuter.nativeElement);
            this.term.loadAddon(this.fitAddon);
            this.observableSetup();
            this.requestRenderFromAPI.next({});
        };
        NgTerminalComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b, _c, _d;
            console.group("onChanges");
            console.debug('prop: ', changes);
            console.groupEnd();
            if (changes === null || changes === void 0 ? void 0 : changes._rowsInput) {
                if (((_a = changes === null || changes === void 0 ? void 0 : changes._rowsInput) === null || _a === void 0 ? void 0 : _a.previousValue) != ((_b = changes === null || changes === void 0 ? void 0 : changes._rowsInput) === null || _b === void 0 ? void 0 : _b.currentValue)) {
                    this.requestRenderFromAPI.next({ rowChanged: true });
                }
            }
            if (changes === null || changes === void 0 ? void 0 : changes._colsInput) {
                if (((_c = changes === null || changes === void 0 ? void 0 : changes._colsInput) === null || _c === void 0 ? void 0 : _c.previousValue) != ((_d = changes === null || changes === void 0 ? void 0 : changes._colsInput) === null || _d === void 0 ? void 0 : _d.currentValue)) {
                    this.requestRenderFromAPI.next({ columnChanged: true });
                }
            }
            // this.requestRenderFromAPI.next({});
        };
        /**
         * It must be called after having initialized the terminal.
         * xterm fit
         * @param rowColChange
         * @returns
         */
        NgTerminalComponent.prototype.coordinateOuterAndTerminal = function (changeList) {
            var _a, _b;
            console.debug("changeList: " + JSON.stringify(changeList));
            // apply a style input while keeping width and height default
            this.stylesForDiv = Object.assign(Object.assign(Object.assign({}, this.stylesForDiv), this._stylesInput), { width: this.stylesForDiv.width, height: this.stylesForDiv.height });
            // but if the div is dragged, update width, height
            if (changeList.dragged) {
                this.stylesForDiv.width = changeList.dragged.draggedWidth;
                this.stylesForDiv.height = changeList.dragged.draggedHeight;
                this.lastDraggedPosition = { width: changeList.dragged.draggedWidth, height: changeList.dragged.draggedHeight };
            }
            else if (!this._rowsInput && !this._colsInput && !(this.draggable && this.lastDraggedPosition)) {
                // but if the dimension of host element is resized, update width and height
                this.stylesForDiv.width = '100%';
                this.stylesForDiv.height = '100%';
            }
            this.applyStyleToDiv();
            // resize with new cols and rows if they changed.
            if (changeList.rowChanged || changeList.columnChanged) {
                this.term.resize((_a = this._colsInput) !== null && _a !== void 0 ? _a : this.term.cols, (_b = this._rowsInput) !== null && _b !== void 0 ? _b : this.term.rows);
            }
            else {
                // fit() operation doesn't see padding values of terminalOuter.
                // But it uses padding values of terminal element.
                // So we force to set padding values when calling fit() operation for a while.
                this.term.element.style.paddingLeft = this.paddingSize + "px";
                this.term.element.style.paddingRight = this.paddingSize + "px";
                this.fitAddon.fit();
                this.term.element.style.padding = '0px';
            }
            // coordinate difference between terminal and outer
            var xtermScreen = this.term.element.getElementsByClassName('xterm-screen')[0];
            var xtermViewport = this.term.element.getElementsByClassName('xterm-viewport')[0];
            var terminalWidth = xtermScreen.clientWidth;
            var terminalHeight = xtermScreen.clientHeight;
            var core = this.underlying._core;
            var scrollWidth = core.viewport.scrollBarWidth;
            // It fixes that the viewport's width doesn't changes after calling fit()
            this.renderer.setStyle(xtermViewport, 'width', terminalWidth + scrollWidth + "px");
            console.debug(terminalWidth + scrollWidth + this.paddingSize * 2, terminalWidth, scrollWidth, this.paddingSize * 2); // + borderWidth * 2
            console.debug(terminalHeight + this.paddingSize * 2, terminalHeight);
            this.stylesForDiv = Object.assign(Object.assign({}, this.stylesForDiv), { width: terminalWidth + scrollWidth + this.paddingSize * 2 + "px", height: terminalHeight + this.paddingSize * 2 + "px" });
            this.applyStyleToDiv();
            this.ref.markForCheck();
        };
        NgTerminalComponent.prototype.observeTerminalDimension = function () {
            var _this = this;
            var viewport = this.terminalOuter.nativeElement.querySelector('.xterm-viewport');
            if (viewport) {
                var resizeObserver$1 = new resizeObserver.ResizeObserver(function (entries) {
                    var e_1, _e;
                    var divWidth = parseFloat(getComputedStyle(_this.terminalOuter.nativeElement).width);
                    var divHeight = parseFloat(getComputedStyle(_this.terminalOuter.nativeElement).height);
                    var width = undefined;
                    var height = undefined;
                    try {
                        for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
                            var entry = entries_1_1.value;
                            if (entry.contentBoxSize) {
                                if (entry.target instanceof HTMLElement) {
                                    width = parseFloat(getComputedStyle(entry.target).width);
                                    height = parseFloat(getComputedStyle(entry.target).height);
                                }
                            }
                            else {
                                width = parseFloat(getComputedStyle(entry.target).width);
                                height = parseFloat(getComputedStyle(entry.target).height);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (entries_1_1 && !entries_1_1.done && (_e = entries_1.return)) _e.call(entries_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (width > divWidth || height > divHeight) {
                        _this.requestRenderFromAPI.next({ whenTerminalDimensionIsOverOuterDiv: { width: width + "px", height: height + "px" } });
                    }
                });
                resizeObserver$1.observe(viewport);
                return resizeObserver$1;
            }
            else {
                console.error("Invalid state is detected. xterm element should exist below .terminal-outer.");
            }
        };
        NgTerminalComponent.prototype.observeHostDimension = function () {
            var _this = this;
            var hostElement = this.hostRef.nativeElement;
            if (hostElement) {
                var resizeObserver$1 = new resizeObserver.ResizeObserver(function (entries) {
                    var e_2, _e;
                    var width = undefined;
                    var height = undefined;
                    try {
                        for (var entries_2 = __values(entries), entries_2_1 = entries_2.next(); !entries_2_1.done; entries_2_1 = entries_2.next()) {
                            var entry = entries_2_1.value;
                            if (entry.contentBoxSize) {
                                if (entry.target instanceof HTMLElement) {
                                    width = parseFloat(getComputedStyle(entry.target).width);
                                    height = parseFloat(getComputedStyle(entry.target).height);
                                }
                            }
                            else {
                                width = parseFloat(getComputedStyle(entry.target).width);
                                height = parseFloat(getComputedStyle(entry.target).height);
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (entries_2_1 && !entries_2_1.done && (_e = entries_2.return)) _e.call(entries_2);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    _this.requestRenderFromAPI.next({ hostResized: { width: width + "px", height: height + "px" } });
                });
                resizeObserver$1.observe(hostElement);
                return resizeObserver$1;
            }
            else {
                console.error("Invalid state is detected. xterm element should exist below .terminal-outer.");
            }
        };
        /**
         * clean all resources
         */
        NgTerminalComponent.prototype.ngOnDestroy = function () {
            if (this.keyInputSubjectSubscription)
                this.keyInputSubjectSubscription.unsubscribe();
            if (this.dataSourceSubscription)
                this.dataSourceSubscription.unsubscribe();
            if (this.keyEventSubjectSubscription)
                this.keyEventSubjectSubscription.unsubscribe();
            if (this.requestRenderSubscription)
                this.requestRenderSubscription.unsubscribe();
            if (this.allLogsSubjectSubscription)
                this.allLogsSubjectSubscription.unsubscribe();
            if (this.interval)
                clearInterval(this.interval);
            if (this.term)
                this.term.dispose();
            this.resizableObservers.forEach(function (ob) { return ob.disconnect(); });
        };
        NgTerminalComponent.prototype.write = function (chars) {
            this.term.write(chars);
        };
        Object.defineProperty(NgTerminalComponent.prototype, "keyInput", {
            get: function () {
                return this.keyInputSubject;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgTerminalComponent.prototype, "keyEventInput", {
            get: function () {
                return this.keyEventSubject;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgTerminalComponent.prototype, "underlying", {
            get: function () {
                return this.term;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgTerminalComponent.prototype, "isDraggableOnEdgeActivated", {
            get: function () {
                // return this.displayOption.activateDraggableOnEdge != undefined && this.displayOption.fixedGrid == undefined;
                return this._draggableInput;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * After user coordinate dimensions of terminal, it's called.
         * @param left
         * @param top
         * @param width
         * @param height
         */
        NgTerminalComponent.prototype.onResizeEnd = function (left, top, width, height) {
            this.setOuterDimensions(left, top, width, height);
        };
        /**
         * Before onResizeEnd is called, it valiates dimensions to change.
         * @param re dimension to be submitted from resizable stuff
         */
        NgTerminalComponent.prototype.validatorFactory = function () {
            var _this = this;
            var comp = this;
            return function (re) {
                var _a, _b;
                // const displayOption = comp.displayOption;
                if (_this._draggableInput) {
                    var left = re.rectangle.left, top = re.rectangle.top, width = re.rectangle.width, height = re.rectangle.height;
                    if ((width < ((_a = _this._minWidthInput) !== null && _a !== void 0 ? _a : 100)) || (height < ((_b = _this._minHeightInput) !== null && _b !== void 0 ? _b : 50))) {
                        return false;
                    }
                    else
                        return true;
                }
                else
                    return false;
            };
        };
        return NgTerminalComponent;
    }());
    NgTerminalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgTerminalComponent, deps: [{ token: i0__namespace.Renderer2 }, { token: i0__namespace.ChangeDetectorRef }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    NgTerminalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: NgTerminalComponent, selector: "ng-terminal", inputs: { _dataSource: ["dataSource", "_dataSource"], _rowsInput: ["rows", "_rowsInput"], _colsInput: ["cols", "_colsInput"], _minWidthInput: ["minWidth", "_minWidthInput"], _minHeightInput: ["minHeight", "_minHeightInput"], draggable: "draggable" }, outputs: { keyInputEmitter: "keyInput", keyEventEmitter: "keyEvent" }, viewQueries: [{ propertyName: "terminalOuter", first: true, predicate: ["terminal"], descendants: true, static: true }, { propertyName: "resizeBox", first: true, predicate: ["resizeBox"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0__namespace, template: "<global-style></global-style>\n<div mwlResizable #resizeBox class=\"resize-box\" [validateResize]=\"validatorFactory()\" [enableGhostResize]=\"true\"\n    (resizeEnd)=\"onResizeEnd($event.rectangle.left, $event.rectangle.top, $event.rectangle.width, $event.rectangle.height)\">\n    <div #terminal class=\"terminal-outer\">\n    </div>\n    <div class=\"resize-handle resize-handle-top\" mwlResizeHandle [ngClass]=\"{'handle-active' : isDraggableOnEdgeActivated}\"\n        [resizeEdges]=\"{ top: false }\"></div>\n    <div class=\"resize-handle resize-handle-left\" mwlResizeHandle [ngClass]=\"{'handle-active' : isDraggableOnEdgeActivated}\"\n        [resizeEdges]=\"{ left: false }\"></div>\n    <div class=\"resize-handle resize-handle-right\" mwlResizeHandle [ngClass]=\"{'handle-active' : isDraggableOnEdgeActivated}\"\n        [resizeEdges]=\"isDraggableOnEdgeActivated ? { right: true } : { right: false }\"></div>\n    <div class=\"resize-handle resize-handle-bottom\" mwlResizeHandle [ngClass]=\"{'handle-active' : isDraggableOnEdgeActivated}\"\n        [resizeEdges]=\"isDraggableOnEdgeActivated ? { bottom: true } : { bottom: false }\"></div>\n</div>", styles: [".terminal-outer{box-sizing:border-box;height:100%;width:100%;padding:5px}:host{display:block;height:100%;width:100%}.resize-box{height:100%;width:100%;position:relative}div>.handle-active{z-index:100;background-color:#85858a}.resize-handle{background-color:#000}.resize-handle-top.handle-active,.resize-handle-bottom.handle-active{cursor:row-resize}.resize-handle-left.handle-active,.resize-handle-right.handle-active{cursor:col-resize}.resize-handle-top,.resize-handle-bottom{position:absolute;height:5px;width:100%}.resize-handle-top{top:0px}.resize-handle-bottom{bottom:0px}.resize-handle-left,.resize-handle-right{position:absolute;height:calc(100%);width:5px}.resize-handle-left{left:0px;top:0px}.resize-handle-right{right:0px;top:0px}\n"], components: [{ type: GlobalStyleComponent, selector: "global-style" }], directives: [{ type: i2__namespace.ResizableDirective, selector: "[mwlResizable]", inputs: ["validateResize", "enableGhostResize", "resizeSnapGrid", "resizeCursors", "ghostElementPositioning", "allowNegativeResizes", "mouseMoveThrottleMS"], outputs: ["resizeStart", "resizing", "resizeEnd"], exportAs: ["mwlResizable"] }, { type: i2__namespace.ResizeHandleDirective, selector: "[mwlResizeHandle]", inputs: ["resizeEdges", "resizableContainer"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgTerminalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'ng-terminal',
                        templateUrl: './ng-terminal.component.html',
                        styleUrls: ['./ng-terminal.component.css'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Renderer2 }, { type: i0__namespace.ChangeDetectorRef }, { type: i0__namespace.ElementRef }]; }, propDecorators: { _dataSource: [{
                    type: i0.Input,
                    args: ['dataSource']
                }], _rowsInput: [{
                    type: i0.Input,
                    args: ['rows']
                }], _colsInput: [{
                    type: i0.Input,
                    args: ['cols']
                }], _minWidthInput: [{
                    type: i0.Input,
                    args: ['minWidth']
                }], _minHeightInput: [{
                    type: i0.Input,
                    args: ['minHeight']
                }], draggable: [{
                    type: i0.Input,
                    args: ['draggable']
                }], keyInputEmitter: [{
                    type: i0.Output,
                    args: ['keyInput']
                }], keyEventEmitter: [{
                    type: i0.Output,
                    args: ['keyEvent']
                }], terminalOuter: [{
                    type: i0.ViewChild,
                    args: ['terminal', { static: true }]
                }], resizeBox: [{
                    type: i0.ViewChild,
                    args: ['resizeBox', { static: true }]
                }] } });

    var NgTerminalModule = /** @class */ (function () {
        function NgTerminalModule() {
        }
        return NgTerminalModule;
    }());
    NgTerminalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgTerminalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    NgTerminalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgTerminalModule, declarations: [NgTerminalComponent, GlobalStyleComponent], imports: [i2.ResizableModule, i3.CommonModule], exports: [NgTerminalComponent] });
    NgTerminalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgTerminalModule, imports: [[
                i2.ResizableModule, i3.CommonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NgTerminalModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [NgTerminalComponent, GlobalStyleComponent],
                        imports: [
                            i2.ResizableModule, i3.CommonModule
                        ],
                        exports: [NgTerminalComponent]
                    }]
            }] });

    /**
     *
     * It is a CSI sequences generator
     * https://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-Functions-using-CSI-_-ordered-by-the-final-character_s_
     */
    var CSI = '\x9b';
    var FunctionsUsingCSI = /** @class */ (function () {
        function FunctionsUsingCSI() {
        }
        /**
         *  CSI Ps @  Insert Ps (Blank) Character(s) (default = 1) (ICH).
         *
         * */
        FunctionsUsingCSI.insertBlank = function (count) {
            return "" + CSI + count + "@";
        };
        /**
         *  CSI Ps SP @ */
        /**
         *  CSI Ps A  Cursor Up Ps Times (default = 1) (CUU).
         * \x9b3A*/
        FunctionsUsingCSI.cursorUp = function (count) {
            return "" + CSI + count + "A";
        };
        /**
         *  CSI Ps SP A */
        /**
         *  CSI Ps B  Cursor Down Ps Times (default = 1) (CUD).
         * \x9b3B */
        FunctionsUsingCSI.cursorDown = function (count) {
            return "" + CSI + count + "B";
        };
        /**
         *  CSI Ps C  Cursor Forward Ps Times (default = 1) (CUF).
         * \x9b3C */
        FunctionsUsingCSI.cursorForward = function (count) {
            return "" + CSI + count + "C";
        };
        /**
         *  CSI Ps D  Cursor Backward Ps Times (default = 1) (CUB).
         * \x9b3D */
        FunctionsUsingCSI.cursorBackward = function (count) {
            return "" + CSI + count + "D";
        };
        /**
         *  CSI Ps E  Cursor Next Line Ps Times (default = 1) (CNL).
         * \x9b3E
         * */
        FunctionsUsingCSI.cursorNextLine = function (count) {
            return "" + CSI + count + "E";
        };
        /**
         *  CSI Ps F  Cursor Preceding Line Ps Times (default = 1) (CPL).
         * \x9b3F
         *  */
        FunctionsUsingCSI.cursorPrecedingLine = function (count) {
            return "" + CSI + count + "F";
        };
        /**
         *  CSI Ps G  Cursor Character Absolute  [column] (default = [row,1]) (CHA).
         *  \x9b9G
         *  */
        FunctionsUsingCSI.cursorColumn = function (count) {
            return "" + CSI + count + "G";
        };
        /**
         *  CSI Ps ; Ps H  Cursor Position [row;column] (default = [1,1]) (CUP).
         * \x9b2;2H
         * */
        FunctionsUsingCSI.cursorPosition = function (row, col) {
            return "" + CSI + row + ";" + col + "H";
        };
        /**
         *  CSI Ps I  Cursor Forward Tabulation Ps tab stops (default = 1) (CHT). */
        /**
         *  CSI Ps J  Erase in Display (ED), VT100.
         *      Ps = 0  -> Erase Below (default).
         *      Ps = 1  -> Erase Above.
         *      Ps = 2  -> Erase All.
         *      Ps = 3  -> Erase Saved Lines (xterm).
         * \x9b2J
         *  */
        FunctionsUsingCSI.eraseInDisplay = function (category) {
            return "" + CSI + category + "J";
        };
        /**
         *  CSI ? Ps J
         *  Erase in Display (DECSED), VT220.
         *    Ps = 0  -> Selective Erase Below (default).
         *    Ps = 1  -> Selective Erase Above.
         *    Ps = 2  -> Selective Erase All.
         *    Ps = 3  -> Selective Erase Saved Lines (xterm).
         * \x9b?2J
         * */
        FunctionsUsingCSI.eraseSelectiveThingsInDisplay = function (category) {
            return CSI + "?" + category + "J";
        };
        /**
         *  CSI Ps K
         *   Erase in Line (EL), VT100.
         *     Ps = 0  -> Erase to Right (default).
         *     Ps = 1  -> Erase to Left.
         *     Ps = 2  -> Erase All.
         * \x9b?1K
         * */
        FunctionsUsingCSI.eraseInLine = function (category) {
            return "" + CSI + category + "K";
        };
        /**
         *  CSI ? Ps K
         *    Erase in Line (DECSEL), VT220.
         *      Ps = 0  -> Selective Erase to Right (default).
         *      Ps = 1  -> Selective Erase to Left.
         *      Ps = 2  -> Selective Erase All.
         * \x9b?1K
         * */
        FunctionsUsingCSI.eraseSelectiveThingsInLine = function (category) {
            return CSI + "?" + category + "K";
        };
        /**
         *  CSI Ps L  Insert Ps Line(s) (default = 1) (IL).
         * \x9b2L
         *  */
        FunctionsUsingCSI.insertLines = function (count) {
            return "" + CSI + count + "L";
        };
        /**
         *  CSI Ps M  Delete Ps Line(s) (default = 1) (DL).
         * \x9b2M
         *  */
        FunctionsUsingCSI.deleteLines = function (count) {
            return "" + CSI + count + "M";
        };
        /**
         *  CSI Ps P  Delete Ps Character(s) (default = 1) (DCH).
         * \x9b2P
         *  */
        FunctionsUsingCSI.deleteCharacter = function (count) {
            return "" + CSI + count + "P";
        };
        /**
         *  CSI Ps S  Scroll up Ps lines (default = 1) (SU), VT420, ECMA-48.
         * \x9b2S
         *  */
        FunctionsUsingCSI.scrollUpLines = function (count) {
            return "" + CSI + count + "S";
        };
        /**
         *  CSI ? Pi ; Pa ; Pv S */
        /**
         *  CSI Ps T  Scroll down Ps lines (default = 1) (SD), VT420.
         * \x9b2T
         * */
        FunctionsUsingCSI.scrollDownLines = function (count) {
            return "" + CSI + count + "T";
        };
        /**
         *  CSI Ps ; Ps ; Ps ; Ps ; Ps T */
        /**
         *  CSI > Ps ; Ps T */
        /**
         *  CSI Ps X  Erase Ps Character(s) (default = 1) (ECH).
         * \x9b2X
         *  */
        FunctionsUsingCSI.eraseCharacters = function (count) {
            return "" + CSI + count + "X";
        };
        return FunctionsUsingCSI;
    }());
    exports.KindOfEraseInDisplay = void 0;
    (function (KindOfEraseInDisplay) {
        KindOfEraseInDisplay[KindOfEraseInDisplay["Below"] = 0] = "Below";
        KindOfEraseInDisplay[KindOfEraseInDisplay["Above"] = 1] = "Above";
        KindOfEraseInDisplay[KindOfEraseInDisplay["All"] = 2] = "All";
        KindOfEraseInDisplay[KindOfEraseInDisplay["SavedLines"] = 3] = "SavedLines";
    })(exports.KindOfEraseInDisplay || (exports.KindOfEraseInDisplay = {}));
    exports.KindOfEraseInLine = void 0;
    (function (KindOfEraseInLine) {
        KindOfEraseInLine[KindOfEraseInLine["Right"] = 0] = "Right";
        KindOfEraseInLine[KindOfEraseInLine["Left"] = 1] = "Left";
        KindOfEraseInLine[KindOfEraseInLine["All"] = 2] = "All";
    })(exports.KindOfEraseInLine || (exports.KindOfEraseInLine = {}));

    /*
     * Public API Surface of ng-terminal
     */
    // export * from './lib/display-option';

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FunctionsUsingCSI = FunctionsUsingCSI;
    exports.NgTerminalComponent = NgTerminalComponent;
    exports.NgTerminalModule = NgTerminalModule;
    exports.NgTerminalService = NgTerminalService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-terminal.umd.js.map
